ctrl o  		向后跳转  
ctel i 			向前跳转
f5   			运行py文件
右shift  "          	开关目录树   配置里设置了目录树跟随文件跳转
gc        		注释整行                      
f3             		格式化代码                               
gf             		跳转到文件中  比如1.txt
ctrl ]    ctrl t     	跳转ctags定义  返回原文件   " 先在源代码目录  ctags -R

K			pythonmode  跳转到函数定义
shift tab		被改为tab键	
:bn			下一个文件
:bp			上一个文件
:bd			删除buffer
zf			进行折叠代码
zo			恢复折叠
f9 在文件间跳转
ctrl 6			在两个文件中跳转




v			进入可视模式
gv			重选上次的高亮区块




\tw         translator

:e          重新载入buffer  
:e 【PATH】 新的buffer打开文件

/           查找
:noh        关闭查找高亮
====================================
pymode-motion key-binding@
===================================
[[    Jump to previous class or function (normal, visual, operator modes)
]]    Jump to next class or function  (normal, visual, operator modes)
[M    Jump to previous class or method (normal, visual, operator modes)
]M    Jump to next class or method (normal, visual, operator modes)
aC    Select a class. Ex: vaC, daC, yaC, caC (operator modes)
iC    Select inner class. Ex: viC, diC, yiC, ciC (operator modes)
aM    Select a function or method. Ex: vaM, daM, yaM, caM (operator modes)
iM    Select inner function or method. Ex: viM, diM, yiM, ciM (operator modes)
V     Select logical line. Ex: dV, yV, cV (operator modes), also works with count

===============================================
分屏
===============================================


关闭分屏

Ctrl+W c//关闭当前窗口。

Ctrl+W q//关闭当前窗口，如果只剩最后一个了，则退出Vim。

分屏

Ctrl+W s//上下分割当前打开的文件。

:sp filename//上下分割，并打开一个新的文件。

Ctrl+W v//左右分割当前打开的文件。

:vsp filename//左右分割，并打开一个新的文件。


移动分屏


Ctrl+W L//向右移动。

Ctrl+W H//向左移动

Ctrl+W K//向上移动

Ctrl+W J//向下移动

屏幕尺寸

下面是改变尺寸的一些操作，主要是高度，对于宽度你可以使用Ctrl+W ，但这可能需要最新的版本才支持。

Ctrl+W =//让所有的屏都有一样的高度。

Ctrl+W +//增加高度。

Ctrl+W -//减少高度。



===============================================
nerdtree
===============================================
R 			刷新目录
i			水平分割
gi			水平分割但不跳转
s			纵向分割
gs			纵向分割但不跳转

cd			把选择的目录设置为工作目录
CD			把当前目录设置为工作目录 可以用cd命令 切换目录


===============================================
替换
===============================================
:开始行，结束行s/from/to/g   	选行替换 容易误伤，所以变量不要只设置为a，b,c这样的单个字母

===============================================
窗口操作
===============================================
1. 新建窗口:（crtl + w） n
2. 分割窗口:(ctrl + w) s
3. 垂直分割窗口:(ctrl + w) v
4. 关闭当前窗口:(ctrl + w) c
5. 关闭其它窗口:(ctrl + w) o
6. 向上轮换窗口:(ctrl + w) R
7. 向下轮换窗口:(crtl + w) r
8. 使窗口等宽:(crtl + w) =
9. 使窗口最小化:(ctrl + w) 1_
10. 使窗口最大化:(crtl + w) _
11. 使窗口向左最小化:(crtl +w ) 1|
12. 使窗口向右最大化:(crtl + w) |
13. 将缓冲区分割到一个窗口中:(crtl + w) ^


===============================================
ez-windows  宝藏插件
===============================================

    窗口导航：

    采用 <C-hjkl>在拆分之间导航。
    将创建一个新窗口，如果它之前不存在或移动到现有窗口。

    调整大小模式：

    <C-m>启动调整大小模式。
    默认情况下使用 <hjkl>键调整分割大小。
    <q>完成。

    打开终端：

    <C-y>打开 /关闭 终端。     这里我更改了映射
    默认情况下使用 <C-\><C-n>映射以在终端拆分内返回正常模式。






===============================================
surround  括号 引号快速处理
===============================================


在文本两端有一对双引号,现在我想把它变为一对单引号, 在普通模式下使用 cs" ' 命令 (以下的操作都是在普通模式下进行)

"Hello world!"

现在它变成了一对单引号

'Hello world!'

现在我想把这对单引号变为一对 < q > 标签 可以使用 cs ' < q > 命令完成

<q>Hello world!</q>

现在我想把这对 < q >标签换回 双引号 ,可以使用 cst " 命令

"Hello world!"

现在我想去除这对双引号 , 可以使用 ds " 命令

Hello world!

现在我想用 一对方括号 将 'Hello' 包起来, 可以使用 ysiw] 命令 ( iw 代表的是文本对象 ,指的是光标下所在的单词).

[Hello] world!

现在我想用 花括号 将 'Hello' 包起来 并在单词两端各添加一个空格 , 可以使用 cs]{ 命令

{ Hello } world!

现在我想在整体这个字符串上加上一对括号 ,可以使用 yssb 或 yss) 命令

({ Hello } world!)

现在我想要把这一对括号和花括号去除 , 可以使用 ds{ds) 命令

Hello world!

现在我想给 'Hello' 这个单词加个 斜体效果 , 可以使用 ysiw< em > 命令

<em>Hello</em> world!

最后, 我们使用大写的 V (进入 行可视模式) 我们可以使用 S< p class="important" > 命令在这个标签的上下自动添加完整的 p 标签

<p class="important">
  <em>Hello</em> world!
</p>

这个插件对于 HTML 和 XML 编辑非常强大，这是一个目前在 Vim 领域似乎没有得到充分满足的利基市场。（与 HTML/XML插入相反 ，有许多插件可用）。同时添加、更改和删除标签对是轻而易举的。

如果你安装了 repeat.vim . 命令将 作用于 ds, cs, 和 yss
